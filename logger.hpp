/**
 * Generated by: Raymond Truong
 * Date: 2025/07/21
 */

#pragma once

#include <memory>
#include <string>
#include <string_view>
#include <algorithm>
#include <spdlog/spdlog.h>
#include <spdlog/sinks/stdout_color_sinks.h>
#include <spdlog/fmt/bundled/color.h>

#ifndef PROJECT_ROOT
#define PROJECT_ROOT "" // fallback for compilation
#endif



class Logger {
    static constexpr bool IS_USING_FULLPATH_FILE_LINE = false; // Set "false" to use relative paths in logs
public:
    static void init() {
        if (!logger) {
            logger = spdlog::stdout_color_mt("console");

            // Pattern:
            // %^   - start color
            // [%T] - time
            // [%l] - log level
            // %v   - log message (we include [file:line] in macros)
            // %$   - reset color
            logger->set_pattern("%^[%T] [%l] %v%$");
            logger->set_level(spdlog::level::info); // default log level
        }
    }

    static void setLevel(const std::string& levelStr) {

        if (!logger) init();
        std::string level = levelStr;
        std::transform(level.begin(), level.end(), level.begin(), ::tolower);
        if (level == "trace")       logger->set_level(spdlog::level::trace);
        else if (level == "debug")  logger->set_level(spdlog::level::debug);
        else if (level == "info")   logger->set_level(spdlog::level::info);
        else if (level == "warn")   logger->set_level(spdlog::level::warn);
        else if (level == "error")  logger->set_level(spdlog::level::err);
        else if (level == "off")    logger->set_level(spdlog::level::off);
        else                        logger->set_level(spdlog::level::info); // default


    }

    static std::shared_ptr<spdlog::logger>& getLogger() {
        if (!logger) init();
        return logger;
    }

    static std::string_view getRelativePath(std::string_view fullPath) {
        constexpr std::string_view root = PROJECT_ROOT;
        size_t pos = fullPath.find(root);
        if (pos != std::string_view::npos) {
            return fullPath.substr(pos + root.length() + 1); // skip trailing slash
        }
        return fullPath;
    }

    // Create a clickable file link for CLion/IDEs
    static std::string getClickableFileLink(const char* filePath, int line) {
        std::string fileName;
        // Format: absolute_path:line
        // CLion and many IDEs recognize this format as clickable
        if (IS_USING_FULLPATH_FILE_LINE)
            fileName = filePath;
        else
            fileName = getRelativePath(filePath);

        return fmt::format("{}:{}", fileName, line);
    }

private:
    static inline std::shared_ptr<spdlog::logger> logger = nullptr;
};

// ---------- Logging Macros with colored [relative file:line] ----------

// color: #4499E0
// R = 44 (hex) = 68 (decimal)
// G = 99 (hex) = 153 (decimal)
// B = E0 (hex) = 224 (decimal)

// 24-bit RGB ANSI format: \033[38;2;R;G;B;m
// \033[38;2;68;153;224m
// └─┬─┘└┬┘└┬┘└─┬─┘└─┬─┘└─┬─┘
//   │   │  │   │    │    │
//   │   │  │   │    │    └─ Blue = 224
//   │   │  │   │    └─ Green = 153
//   │   │  │   └─ Red = 68
//   │   │  └─ RGB mode
//   │   └─ Foreground color
//   └─ Escape character
namespace {
    // Color codes for different log levels (subtle tones)
#define TRACE_COLOR    "\033[38;2;156;156;156m"  // Medium Gray #9C9C9C
#define DEBUG_COLOR    "\033[38;2;96;253;255m"   // Bright Cyan #60FDFF
#define INFO_COLOR     "\033[38;2;72;213;58m"    // Bright Green #48D53A
#define WARN_COLOR     "\033[38;2;199;196;1m"    // Yellow-Green #C7C401
#define ERROR_COLOR    "\033[38;2;200;27;1m"     // Dark Red #C81B01
#define CRITICAL_COLOR "\033[38;2;255;50;150m"   // Pink
#define RESET_COLOR    "\033[0m"
#define LINK_COLOR    "\033[38;2;68;153;224m"
}

#define FILE_LINE_COLORED() \
    fmt::format(LINK_COLOR "[\033[0m{}" LINK_COLOR "]\033[0m", Logger::getClickableFileLink(__FILE__, __LINE__))
    // fmt::format(fmt::fg(fmt::color::yellow), "[{}]", Logger::getClickableFileLink(__FILE__, __LINE__))

#define LOG_TRACE(msg, ...)    SPDLOG_LOGGER_TRACE(Logger::getLogger(), "{} " TRACE_COLOR msg RESET_COLOR, FILE_LINE_COLORED(), ##__VA_ARGS__)
#define LOG_DEBUG(msg, ...)    SPDLOG_LOGGER_DEBUG(Logger::getLogger(), "{} " DEBUG_COLOR msg RESET_COLOR, FILE_LINE_COLORED(), ##__VA_ARGS__)
#define LOG_INFO(msg, ...)     SPDLOG_LOGGER_INFO(Logger::getLogger(),  "{} " INFO_COLOR msg RESET_COLOR, FILE_LINE_COLORED(), ##__VA_ARGS__)
#define LOG_WARN(msg, ...)     SPDLOG_LOGGER_WARN(Logger::getLogger(),  "{} " WARN_COLOR msg RESET_COLOR, FILE_LINE_COLORED(), ##__VA_ARGS__)
#define LOG_ERROR(msg, ...)    SPDLOG_LOGGER_ERROR(Logger::getLogger(), "{} " ERROR_COLOR msg RESET_COLOR, FILE_LINE_COLORED(), ##__VA_ARGS__)
#define LOG_CRITICAL(msg, ...) SPDLOG_LOGGER_CRITICAL(Logger::getLogger(), "{} " CRITICAL_COLOR msg RESET_COLOR, FILE_LINE_COLORED(), ##__VA_ARGS__)